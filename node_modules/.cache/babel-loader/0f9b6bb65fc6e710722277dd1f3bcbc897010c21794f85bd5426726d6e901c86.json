{"ast":null,"code":"var _jsxFileName = \"/Users/Qusai.Qishta/Downloads/react-https-reqs/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/film');\n      const data = await response.json();\n      const requiredData = data.results.map(movie => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date\n        };\n      });\n      setMovies(requiredData);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), !isLoading && movies.length >= 1 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 44\n      }, this), !isLoading && movies.length == 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Movies Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 53\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"something went wrong..try agin after 1 minute \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Mhgugv26A3Tqk+sOa/Pb1BFgsCM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","data","json","requiredData","results","map","movie","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","length"],"sources":["/Users/Qusai.Qishta/Downloads/react-https-reqs/src/App.js"],"sourcesContent":["import React , {useState} from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies,setMovies]=useState([]);\n  const [isLoading,setIsLoading]=useState(false);\n  const [error,setError] = useState(null);\n  async function fetchMoviesHandler(){\n    setIsLoading(true);\n    setError(null);\n    try{\n      const response = await fetch('https://swapi.dev/api/film');\n      const data=await response.json();\n      const requiredData=data.results.map(movie=>{\n        return{\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        }\n      })\n      setMovies(requiredData);\n    }\n    catch(error){\n   setError(error.message);\n    }\n\n    setIsLoading(false);\n  }\n  \n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {isLoading&&<p>Loading...</p>}\n        {!isLoading && movies.length>=1 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length==0 &&!error && <p>No Movies Found</p> }\n        {error && <p>something went wrong..try agin after 1 minute </p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAO,OAAO;AACtC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnB,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAACJ,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACK,SAAS,EAACC,YAAY,CAAC,GAACN,QAAQ,CAAC,KAAK,CAAC;EAC9C,MAAM,CAACO,KAAK,EAACC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACvC,eAAeS,kBAAkB,GAAE;IACjCH,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAG;MACD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;MAC1D,MAAMC,IAAI,GAAC,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAChC,MAAMC,YAAY,GAACF,IAAI,CAACG,OAAO,CAACC,GAAG,CAACC,KAAK,IAAE;QACzC,OAAM;UACJC,EAAE,EAAED,KAAK,CAACE,UAAU;UACpBC,KAAK,EAAEH,KAAK,CAACG,KAAK;UAClBC,WAAW,EAAEJ,KAAK,CAACK,aAAa;UAChCC,WAAW,EAAEN,KAAK,CAACO;QACrB,CAAC;MACH,CAAC,CAAC;MACFpB,SAAS,CAACU,YAAY,CAAC;IACzB,CAAC,CACD,OAAMP,KAAK,EAAC;MACbC,QAAQ,CAACD,KAAK,CAACkB,OAAO,CAAC;IACtB;IAEAnB,YAAY,CAAC,KAAK,CAAC;EACrB;EAEA,oBACE,QAAC,KAAK,CAAC,QAAQ;IAAA,wBACb;MAAA,uBACE;QAAQ,OAAO,EAAEG,kBAAmB;QAAA,UAAC;MAAY;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QAClD,eACV;MAAA,WACGJ,SAAS,iBAAE;QAAA,UAAG;MAAU;QAAA;QAAA;QAAA;MAAA,QAAI,EAC5B,CAACA,SAAS,IAAIF,MAAM,CAACuB,MAAM,IAAE,CAAC,iBAAI,QAAC,UAAU;QAAC,MAAM,EAAEvB;MAAO;QAAA;QAAA;QAAA;MAAA,QAAG,EAChE,CAACE,SAAS,IAAIF,MAAM,CAACuB,MAAM,IAAE,CAAC,IAAG,CAACnB,KAAK,iBAAI;QAAA,UAAG;MAAe;QAAA;QAAA;QAAA;MAAA,QAAI,EACjEA,KAAK,iBAAI;QAAA,UAAG;MAA8C;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACvD;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAErB;AAAC,GAxCQL,GAAG;AAAA,KAAHA,GAAG;AA0CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}